<?php

namespace App\Http\Controllers;

use App\Categoria;
use App\Contacto;
use App\Empresa;
use App\Model\Gastos\FacturaProveedores;
use App\Model\Gastos\Gastos;
use App\Model\Gastos\GastosCategoria;
use App\Model\Gastos\ItemsFacturaProv;
use App\Model\Ingresos\Factura;
use App\Funcion;
use App\Model\Ingresos\Ingreso;
use App\Model\Ingresos\IngresosCategoria;
use App\Model\Ingresos\IngresosFactura;
use App\Model\Ingresos\ItemsFactura;
use App\Model\Ingresos\Remision;
use App\Model\Inventario\Bodega;
use App\Model\Inventario\Inventario;
use App\Model\Inventario\ProductosBodega;
use App\Movimiento;
use App\Vendedor;
use Illuminate\Http\Request; use Carbon\Carbon;
use App\NumeracionFactura;
use DB;
include_once(app_path() .'/../public/PHPExcel/Classes/PHPExcel.php');

use Illuminate\Support\Facades\Auth;
use PHPExcel; use PHPExcel_IOFactory; use PHPExcel_Style_Alignment; use PHPExcel_Style_Fill;
use PHPExcel_Style_Border;
use PHPExcel_Style_NumberFormat;
use ZipArchive;
use PHPExcel_Shared_ZipArchive;
class ExportarReportesController extends Controller
{
	/**
   * Create a new controller instance.
   *
   * @return void
   */
	public function __construct()
	{
		$this->middleware('auth');
		view()->share(['seccion' => 'reportes', 'title' => 'Exportar Reportes', 'icon' =>'fas fa-chart-line']);
	}

	public function ventas(Request $request){
        //Acá se obtiene la información a impimir

        //Si es remisones se ejecuta el metodo remisiones
        if ($request->nro == 'remisiones'){


            $this->remisiones($request);


        }else{

            $objPHPExcel = new PHPExcel();
            $tituloReporte = "Reporte de Ventas desde ".$request->fecha." hasta ".$request->hasta;

            $titulosColumnas = array('Numero', 'Cliente', 'Creacion', 'Antes de Impuestos', 'Despues de Impuestos');
            $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
            $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
            ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
            ->setTitle("Reporte Excel Ventas") // Titulo
            ->setSubject("Reporte Excel Ventas") //Asunto
            ->setDescription("Reporte de Ventas") //Descripci���n
            ->setKeywords("reporte Ventas") //Etiquetas
            ->setCategory("Reporte excel"); //Categorias
            // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
            $objPHPExcel->setActiveSheetIndex(0)
                ->mergeCells('A1:D1');
            // Se agregan los titulos del reporte
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A1',$tituloReporte);
            $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            ));
            $objPHPExcel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($estilo);
            $estilo =array('fill' => array(
                'type' => PHPExcel_Style_Fill::FILL_SOLID,
                'color' => array('rgb' => 'd08f50')));
            $objPHPExcel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($estilo);


            for ($i=0; $i <count($titulosColumnas) ; $i++) {

                $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
            }

            $facturas = Factura::where('empresa',Auth::user()->empresa)->where('tipo','!=',2);
            if (!$request->fecha) {
                $month = date('m');
                $year = date('Y');
                $day = date("d", mktime(0,0,0, $month+1, 0, $year));
                $fin= date('Y-m-d', mktime(0,0,0, $month, $day, $year));
                $request->hasta=date('d-m-Y', mktime(0,0,0, $month, $day, $year));
                $month = date('m');
                $year = date('Y');
                $inicio=  date('Y-m-d', mktime(0,0,0, $month, 1, $year));
                $request->fecha=date('d-m-Y', mktime(0,0,0, $month, 1, $year));
            }
            else{
                $inicio= date('Y-m-d', strtotime($request->fecha));
                $fin= date('Y-m-d', strtotime($request->hasta));
            }

            if ($request->nro>0) {
                $facturas=$facturas->where('numeracion', $request->nro);
            }
            $facturas=$facturas->where('fecha','>=', $inicio)->where('fecha','<=', $fin);
            $ides=array();
            $factures=$facturas->get();
            $facturas=$facturas->OrderBy('id', 'DESC')->paginate(1000000)->appends(['fechas'=>$request->fechas, 'nro'=>$request->nro, 'fecha'=>$request->fecha, 'hasta'=>$request->hasta]);

            foreach ($factures as $factura) {
                $ides[]=$factura->id;
            }

            $subtotal=$total=0;
            if ($ides) {
                $result=DB::table('items_factura')->whereIn('factura', $ides)->select(DB::raw("SUM((`cant`*`precio`)) as 'total', SUM((precio*(`desc`/100)*`cant`)+0)  as 'descuento', SUM((precio-(precio*(if(`desc`,`desc`,0)/100)))*(`impuesto`/100)*cant) as 'impuesto'  "))->first();
                $subtotal=$this->precision($result->total-$result->descuento);
                $total=$this->precision((float)$subtotal+$result->impuesto);
            }

            // Aquí se escribe en el archivo
            $i=4;

            foreach ($facturas as $factura) {
                $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue($letras[0].$i, $factura->codigo)
                    ->setCellValue($letras[1].$i, $factura->cliente()->nombre)
                    ->setCellValue($letras[2].$i, date('d-m-Y', strtotime($factura->fecha)))
                    ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->total()->subsub))
                    ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($factura->total()->total));
                $i++;
            }
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[2].$i, "TOTAL: ")
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($subtotal))
                ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda. " ".Funcion::Parsear($total));


            $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
            $objPHPExcel->getActiveSheet()->getStyle('A3:E'.$i)->applyFromArray($estilo);


            for($i = 'A'; $i <= $letras[20]; $i++){
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
            }

            // Se asigna el nombre a la hoja
            $objPHPExcel->getActiveSheet()->setTitle('Reporte de Ventas');

            // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
            $objPHPExcel->setActiveSheetIndex(0);

            // Inmovilizar paneles
            $objPHPExcel->getActiveSheet(0)->freezePane('A2');
            $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
            $objPHPExcel->setActiveSheetIndex(0);
            header("Pragma: no-cache");
            header('Content-type: application/vnd.ms-excel');
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment;filename="Reporte_Ventas.xlsx"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save('php://output');
            exit;

        }


    }

    private function remisiones($request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de Ventas-Remisiones desde ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Numero', 'Cliente', 'Creacion', 'Antes de Impuestos', 'Despues de Impuestos');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ventas Remisiones") // Titulo
        ->setSubject("Reporte Excel Ventas Remisiones") //Asunto
        ->setDescription("Reporte de Ventas Remisiones") //Descripci���n
        ->setKeywords("reporte Ventas Remisiones") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:E1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $dates = $this->setDateRequest($request);

        $campos=array('', 'remisiones.id', 'nombrecliente', 'remisiones.fecha', 'remisiones.vencimiento', 'total', 'pagado', 'porpagar', 'remisiones.estatus');
        if (!$request->orderby) {
            $request->orderby=1; $request->order=1;
        }
        $orderby=$campos[$request->orderby];
        $order=$request->order==1?'DESC':'ASC';

        $facturas=Remision::join('contactos as c', 'remisiones.cliente', '=', 'c.id')
            ->join('items_remision as if', 'remisiones.id', '=', 'if.remision')
            ->select('remisiones.id', 'remisiones.nro', DB::raw('c.nombre as nombrecliente'), 'remisiones.cliente',
                'remisiones.fecha', 'remisiones.vencimiento', 'remisiones.estatus',
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) as total'),
                DB::raw('((Select SUM(pago) from ingresosr_remisiones where remision=remisiones.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where remision=remisiones.id)) as pagado'),
                DB::raw('(SUM(
          (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) -  ((Select SUM(pago) from ingresosr_remisiones where remision=remisiones.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where remision=remisiones.id)) )    as porpagar'))
            ->where('remisiones.empresa',Auth::user()->empresa)
            ->where('fecha','>=', $dates['inicio'])
            ->where('fecha','<=', $dates['fin']);
        $appends=array('orderby'=>$request->orderby, 'order'=>$request->order);
        $facturas=$facturas->groupBy('if.remision');
        $facturas=$facturas->OrderBy($orderby, $order)->get();
        $totales = $this->totalRemisiones($dates);

        $i=4;
        foreach ($facturas as $factura) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $factura->nro)
                ->setCellValue($letras[1].$i, $factura->cliente()->nombre)
                ->setCellValue($letras[2].$i, date('d-m-Y', strtotime($factura->fecha)))
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->total()->subsub))
                ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($factura->total()->total));
            $i++;
        }
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[2].$i, "TOTAL: ")
            ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($totales['subtotal']))
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda. " ".Funcion::Parsear($totales['total']));


        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de Ventas-Remisiones');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ventas_Remisiones.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;


    }

    private function totalRemisiones($dates)
    {
        $facturas=Remision::join('contactos as c', 'remisiones.cliente', '=', 'c.id')
            ->join('items_remision as if', 'remisiones.id', '=', 'if.remision')
            ->select('remisiones.id', 'remisiones.nro', DB::raw('c.nombre as nombrecliente'), 'remisiones.cliente',
                'remisiones.fecha', 'remisiones.vencimiento', 'remisiones.estatus',
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) as total'),
                DB::raw('((Select SUM(pago) from ingresosr_remisiones where remision=remisiones.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where remision=remisiones.id)) as pagado'),
                DB::raw('(SUM(
          (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) -  ((Select SUM(pago) from ingresosr_remisiones where remision=remisiones.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where remision=remisiones.id)) )    as porpagar'))
            ->where('remisiones.empresa',Auth::user()->empresa)
            ->where('fecha','>=', $dates['inicio'])
            ->where('fecha','<=', $dates['fin'])
            ->groupBy('if.remision')
            ->get();

        $totales = array(
            'total' => 0,
            'subtotal' => 0,
        );

        foreach ($facturas as $factura) {
            $totales['total']+= $factura->total()->total;
            $totales['subtotal']+= $factura->total()->subsub;
        }

        return $totales;
    }

    public function ventasItem(Request $request){
        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de Ventas de ítem desde ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Ítem', 'Referencia', 'Numero de ítems', 'Antes de Impuestos', 'Despues de Impuestos');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ventas De Item") // Titulo
        ->setSubject("Reporte Excel Ventas De Item") //Asunto
        ->setDescription("Reporte de Ventas de Item") //Descripci���n
        ->setKeywords("reporte Ventas de ítem") //Etiquetas
        ->setCategory("Reporte excel de ítem"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:D1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        //Acá se obtiene la información a impimir

        //Si no hay fecha establecida dentro de la url se establece desde el 1 al 30/31 del mes actual
        if (!$request->fecha) {
            $month = date('m');
            $year = date('Y');
            $day = date("d", mktime(0,0,0, $month+1, 0, $year));
            $fin= date('Y-m-d', mktime(0,0,0, $month, $day, $year));
            $request->hasta=date('d-m-Y', mktime(0,0,0, $month, $day, $year));
            $month = date('m');
            $year = date('Y');
            $inicio=  date('Y-m-d', mktime(0,0,0, $month, 1, $year));
            $request->fecha=date('d-m-Y', mktime(0,0,0, $month, 1, $year));
        }
        else{
            $inicio= date('Y-m-d', strtotime($request->fecha));
            $fin= date('Y-m-d', strtotime($request->hasta));
        }
        $user = Auth::user()->empresa;
        //Se cuenta cuantas veces se repiten las facturas con un mismo producto
        $sqlRepeticiones =
            "SELECT SUM(cant) as rep, producto FROM items_factura WHERE items_factura.factura IN 
	            ( 
		            SELECT id FROM factura 
			            WHERE factura.fecha >= '$inicio' 
				            AND factura.fecha <= '$fin'
				            AND factura.empresa = '$user'
				            AND factura.tipo != 2
			                ORDER BY factura.id DESC 
	            ) 
            GROUP BY (producto)";

        $repeticones = DB::select($sqlRepeticiones);
        //dd($repeticones);
        //Subconsulta para obtener todos los productos según su item factura
        $productos = DB::table('inventario')
            ->select('id', 'producto', 'ref', 'precio', DB::raw('precio+(precio*(impuesto/100)) as total'))
            ->whereIn('id', function ($query) use ($inicio, $fin, $user){
                $query->select('producto')
                    ->from(with(new ItemsFactura)->getTable())
                    ->whereIn('factura', function ($sql) use ($inicio, $fin, $user){
                        $sql->select('id')
                            ->from(with(new Factura)->getTable())
                            ->where('fecha', ">=", $inicio)
                            ->where('fecha', "<=", $fin)
                            ->where('empresa', $user)
                            ->where('tipo','!=', 2);
                    });
            })->paginate(50)
            ->appends(['fechas'=>$request->fechas, 'nro'=>$request->nro, 'fecha'=>$request->fecha,
                'hasta'=>$request->hasta]);

        //Subconsulta para determinar todos los precios de los productos
        $productosTotal = DB::table('inventario')
            ->select('precio', DB::raw('precio+(precio*(impuesto/100)) as total'))
            ->whereIn('id', function ($query) use ($inicio, $fin, $user){
                $query->select('producto')
                    ->from(with(new ItemsFactura)->getTable())
                    ->whereIn('factura', function ($sql) use ($inicio, $fin, $user){
                        $sql->select('nro')
                            ->from(with(new Factura)->getTable())
                            ->where('fecha', ">=", $inicio)
                            ->where('fecha', "<=", $fin)
                            ->where('empresa', $user)
                            ->where('tipo', 1);
                    });
            })->get();

        //Se agregan las veces que se repiten y se determina el gran total
        $i = 0;
        $total = 0;
        $subtotal = 0;
        foreach ( $productos as $key => $producto ){


            $producto->rep = $repeticones[$i]->rep;
            $producto->precio = $producto->precio * $producto->rep;
            $producto->total = $producto->total * $producto->rep;
            $total += $producto->total;
            $subtotal += $producto->precio;
            $i++;
        }

        // Aquí se escribe en el archivo
        $i=4;

        foreach ($productos as $producto) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $producto->producto)
                ->setCellValue($letras[1].$i, $producto->ref)
                ->setCellValue($letras[2].$i, $producto->rep)
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($producto->precio))
                ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($producto->total));
            $i++;
        }
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[2].$i, "TOTAL: ")
            ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($subtotal))
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda. " ".Funcion::Parsear($total));


        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de Ventas de ítem');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ventas_Item.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }


    public function ventasCliente(Request $request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de Ventas por cliente desde ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Cliente', 'Numero de facturas', 'Antes de Impuestos', 'Despues de Impuestos');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ventas Por Cliente") // Titulo
        ->setSubject("Reporte Excel Ventas Por Cliente") //Asunto
        ->setDescription("Reporte de Ventas Por CLiente") //Descripci���n
        ->setKeywords("reporte Ventas por cliente") //Etiquetas
        ->setCategory("Reporte excel de ventas por clientes"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:D1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:D3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }


        //Si no hay fecha establecida dentro de la url se establece desde el 1 al 30/31 del mes actual
        if (!$request->fecha) {
            $month = date('m');
            $year = date('Y');
            $day = date("d", mktime(0,0,0, $month+1, 0, $year));
            $fin= date('Y-m-d', mktime(0,0,0, $month, $day, $year));
            $request->hasta=date('d-m-Y', mktime(0,0,0, $month, $day, $year));
            $month = date('m');
            $year = date('Y');
            $inicio=  date('Y-m-d', mktime(0,0,0, $month, 1, $year));
            $request->fecha=date('d-m-Y', mktime(0,0,0, $month, 1, $year));
        }
        else{
            $inicio= date('Y-m-d', strtotime($request->fecha));
            $fin= date('Y-m-d', strtotime($request->hasta));
        }

        $user = Auth::user()->empresa;

        $sqlNroFacturaCliente = "SELECT factura.id as factura, contactos.id, contactos.nombre FROM factura
	                                INNER JOIN  contactos ON factura.cliente = contactos.id
                                    WHERE factura.fecha >= '$inicio' 
                                    AND factura.fecha <= '$fin' 
                                    AND factura.empresa = '$user'
                                    AND factura.tipo = 1";


        $datoFacturas = DB::table('items_factura')
            ->select('id', DB::raw('SUM(precio) as precio'), 'factura', DB::raw('COUNT(factura)'),
                DB::raw('SUM(precio)+(SUM(precio)*(impuesto/100)) as total'))
            ->whereIn('factura', function ($query) use ($inicio, $fin, $user){
                $query->select('id')
                    ->from(with(new Factura)->getTable())
                    ->where('fecha', ">=", $inicio)
                    ->where('fecha', "<=", $fin)
                    ->where('empresa', $user)
                    ->where('tipo', 1)
                    ->whereIn('cliente', function ($sql) use ($inicio, $fin, $user){
                        $sql->select('id')
                            ->from(with(new Contacto)->getTable())
                            ->whereIn('id', function ($sqlQuery) use ($inicio, $fin, $user){
                                $sqlQuery->select('cliente')
                                    ->from(with(new Contacto)->getTable())
                                    ->where('fecha', ">=", $inicio)
                                    ->where('fecha', "<=", $fin)
                                    ->where('empresa', $user)
                                    ->where('tipo', 1);
                            });
                    });
            })
            ->groupby('factura')
            ->paginate(1000000)
            ->appends(['fechas'=>$request->fechas, 'nro'=>$request->nro, 'fecha'=>$request->fecha,
                'hasta'=>$request->hasta]);

        $nroFacturas = DB::select($sqlNroFacturaCliente);

        $i = 0;
        $clientes= array();
        $subtotal = 0;
        $total= 0;
        foreach ($datoFacturas as $datoFactura){

            if(!isset($clientes[$nroFacturas[$i]->id])){
                $clientes[$nroFacturas[$i]->id]['nombre'] = $nroFacturas[$i]->nombre;
                $clientes[$nroFacturas[$i]->id]['subtotal'] = $datoFactura->precio;
                $clientes[$nroFacturas[$i]->id]['total'] = $datoFactura->total;
                $clientes[$nroFacturas[$i]->id]['rep'] = 1;
                $subtotal = $datoFactura->precio;
                $total = $datoFactura->total;

            }else{

                $clientes[$nroFacturas[$i]->id]['subtotal']+= $datoFactura->precio;
                $clientes[$nroFacturas[$i]->id]['total'] += $datoFactura->total;
                $clientes[$nroFacturas[$i]->id]['rep']+=1;
                $subtotal+= $datoFactura->precio;
                $total+= $datoFactura->total;
            }

            $i++;
        }


        $i=4;
        foreach ($clientes as $cliente) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $cliente['nombre'])
                ->setCellValue($letras[1].$i, $cliente['rep'])
                ->setCellValue($letras[2].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($cliente['subtotal']))
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($cliente['total']));
            $i++;
        }
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[2].$i, "Subtotal: " . Auth::user()->empresa()->moneda." ".Funcion::Parsear($subtotal))
            ->setCellValue($letras[3].$i, "Total: " . Auth::user()->empresa()->moneda. " ".Funcion::Parsear($total));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:D'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de ventas por cliente');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ventas_Clientes.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;


    }

    public function remisionesCliente(Request $request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de Remisiones por cliente desde ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Cliente', 'Numero de facturas', 'Antes de Impuestos', 'Despues de Impuestos');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ventas Por Cliente") // Titulo
        ->setSubject("Reporte Excel Ventas Por Cliente") //Asunto
        ->setDescription("Reporte de Ventas Por CLiente") //Descripci���n
        ->setKeywords("reporte Ventas por cliente") //Etiquetas
        ->setCategory("Reporte excel de ventas por clientes"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:D1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:D3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }


        //Si no hay fecha establecida dentro de la url se establece desde el 1 al 30/31 del mes actual
        if (!$request->fecha) {
            $month = date('m');
            $year = date('Y');
            $day = date("d", mktime(0,0,0, $month+1, 0, $year));
            $fin= date('Y-m-d', mktime(0,0,0, $month, $day, $year));
            $request->hasta=date('d-m-Y', mktime(0,0,0, $month, $day, $year));
            $month = date('m');
            $year = date('Y');
            $inicio=  date('Y-m-d', mktime(0,0,0, $month, 1, $year));
            $request->fecha=date('d-m-Y', mktime(0,0,0, $month, 1, $year));
        }
        else{
            $inicio= date('Y-m-d', strtotime($request->fecha));
            $fin= date('Y-m-d', strtotime($request->hasta));
        }

        $user = Auth::user()->empresa;

        $sqlNroFacturaCliente = "SELECT remisiones.id as remision, contactos.id, contactos.nombre FROM remisiones
	                                INNER JOIN  contactos ON remisiones.cliente = contactos.id
                                    WHERE remisiones.fecha >= '$inicio' 
                                    AND remisiones.fecha <= '$fin' 
                                    AND remisiones.empresa = '$user'
                                    AND remisiones.documento = 1";


        $datoRemisiones = DB::table('items_remision')
            ->select('id', DB::raw('SUM(precio) as precio'), 'remision', DB::raw('COUNT(remision)'),
                DB::raw('SUM(precio)+(SUM(precio)*(impuesto/100)) as total'))
            ->whereIn('remision', function ($query) use ($inicio, $fin, $user){
                $query->select('id')
                    ->from(with(new Remision)->getTable())
                    ->where('fecha', ">=", $inicio)
                    ->where('fecha', "<=", $fin)
                    ->where('empresa', $user)
                    ->where('documento', 1)
                    ->whereIn('cliente', function ($sql) use ($inicio, $fin, $user){
                        $sql->select('id')
                            ->from(with(new Contacto)->getTable())
                            ->whereIn('id', function ($sqlQuery) use ($inicio, $fin, $user){
                                $sqlQuery->select('cliente')
                                    ->from(with(new Contacto)->getTable())
                                    ->where('fecha', ">=", $inicio)
                                    ->where('fecha', "<=", $fin)
                                    ->where('empresa', $user)
                                    ->where('documento','=', 1);
                            });
                    });
            })
            ->groupby('remision')
            ->paginate(1000000)
            ->appends(['fechas'=>$request->fechas, 'nro'=>$request->nro, 'fecha'=>$request->fecha,
                'hasta'=>$request->hasta]);

        $nroRemisiones = DB::select($sqlNroFacturaCliente);


        $i = 0;
        $clientes= array();
        $subtotal = 0;
        $total= 0;
        foreach ($datoRemisiones as $datoRemision){

            if(!isset($clientes[$nroRemisiones[$i]->id])){
                $clientes[$nroRemisiones[$i]->id]['nombre'] = $nroRemisiones[$i]->nombre;
                $clientes[$nroRemisiones[$i]->id]['id'] = $nroRemisiones[$i]->id;
                $clientes[$nroRemisiones[$i]->id]['subtotal'] = $datoRemision->precio;
                $clientes[$nroRemisiones[$i]->id]['total'] = $datoRemision->total;
                $clientes[$nroRemisiones[$i]->id]['rep'] = 1;
                $subtotal += $datoRemision->precio;
                $total += $datoRemision->total;

            }else{

                $clientes[$nroRemisiones[$i]->id]['subtotal']+= $datoRemision->precio;
                $clientes[$nroRemisiones[$i]->id]['total'] += $datoRemision->total;
                $clientes[$nroRemisiones[$i]->id]['rep']+=1;
                $subtotal+= $datoRemision->precio;
                $total+= $datoRemision->total;

            }

            $i++;
        }


        $i=4;
        foreach ($clientes as $cliente) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $cliente['nombre'])
                ->setCellValue($letras[1].$i, $cliente['rep'])
                ->setCellValue($letras[2].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($cliente['subtotal']))
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($cliente['total']));
            $i++;
        }
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[2].$i, "Subtotal: " . Auth::user()->empresa()->moneda." ".Funcion::Parsear($subtotal))
            ->setCellValue($letras[3].$i, "Total: " . Auth::user()->empresa()->moneda. " ".Funcion::Parsear($total));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:D'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de remisiones por cliente');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Remisiones_Clientes.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;


    }

    public function cuentasCobrar(Request $request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de cuentas por cobrar ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Numero', 'Cliente', 'Creacion', 'Vencimiento', 'Total', 'Pagado', 'Por Pagar');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Cuentas Por Cobrar") // Titulo
        ->setSubject("Reporte Excel Cuentas Por Cobrar") //Asunto
        ->setDescription("Reporte Excel Cuentas Por Cobrar") //Descripci���n
        ->setKeywords("reporte cuentas por cobrar") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:F1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:G3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        if($request->nro == 'remisiones'){
            $tituloReporte = "Reporte de cuentas por cobrar remisiones ".$request->fecha." hasta ".$request->hasta;
            $this->remisionesCobrar($request);
        }else {

            //Aquí se obtienen los datos

            //Pendiente sustituir esto por setDateRequest
            //Si no hay fecha establecida dentro de la url se establece desde el 1 al 30/31 del mes actual
            if (!$request->fecha) {
                $month = date('m');
                $year = date('Y');
                $day = date("d", mktime(0, 0, 0, $month + 1, 0, $year));
                $fin = date('Y-m-d', mktime(0, 0, 0, $month, $day, $year));
                $request->hasta = date('d-m-Y', mktime(0, 0, 0, $month, $day, $year));
                $month = date('m');
                $year = date('Y');
                $inicio = date('Y-m-d', mktime(0, 0, 0, $month, 1, $year));
                $request->fecha = date('d-m-Y', mktime(0, 0, 0, $month, 1, $year));
            } else {
                $inicio = date('Y-m-d', strtotime($request->fecha));
                $fin = date('Y-m-d', strtotime($request->hasta));
            }


            //Código base de  FacturasController@index

            $campos = array('', 'factura.id', 'nombrecliente', 'factura.fecha', 'factura.vencimiento', 'total', 'pagado', 'porpagar', 'factura.estatus');
            if (!$request->orderby) {
                $request->orderby = 1;
                $request->order = 1;
            }
            $orderby = $campos[$request->orderby];
            $order = $request->order == 1 ? 'DESC' : 'ASC';

            $facturas = Factura::join('contactos as c', 'factura.cliente', '=', 'c.id')
                ->join('items_factura as if', 'factura.id', '=', 'if.factura')
                ->select('factura.id', 'factura.codigo', 'factura.nro', DB::raw('c.nombre as nombrecliente'), 'factura.cliente', 'factura.fecha', 'factura.vencimiento', 'factura.estatus',
                    DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) as total'),
                    DB::raw('((Select SUM(pago) from ingresos_factura where factura=factura.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura.id)) as pagado'),
                    DB::raw('(SUM(
          (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) -  ((Select SUM(pago) from ingresos_factura where factura=factura.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura.id)) - (Select if(SUM(pago), SUM(pago), 0) from notas_factura where factura=factura.id) )    as porpagar'))
                ->where('factura.empresa', Auth::user()->empresa)->where('factura.tipo', 1)
                ->where('factura.estatus', 1);
            $appends = array('orderby' => $request->orderby, 'order' => $request->order);

            //Filtrado por fecha
            if ($request->fecha) {
                $appends['fecha'] = $request->fecha;
                $facturas = $facturas->where('factura.fecha', ">=", date('Y-m-d', strtotime($request->fecha)));
            }
            if ($request->fecha) {
                $appends['hasta'] = $request->hasta;
                $facturas = $facturas->where('factura.fecha', "<=", date('Y-m-d', strtotime($request->hasta)));
            }

            $facturas = $facturas->groupBy('if.factura');

            if ($request->name_5) {
                $busqueda = true;
                $appends['name_5'] = $request->name_5;
                $appends['name_5_simb'] = $request->name_5_simb;
                $facturas = $facturas->havingRaw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) ' . $request->name_5_simb . ' ?', [$request->name_5]);
            }
            $facturas = $facturas->OrderBy($orderby, $order)->paginate(10000000)->appends($appends);


            //Se determina el gran total
            $totalPagar = 0;
            foreach ($facturas as $factura) {
                $totalPagar += $factura->porPagar();
            }

            $i = 4;
            foreach ($facturas as $factura) {
                if (Funcion::Parsear($factura->porpagar()) > 0) {
                    $objPHPExcel->setActiveSheetIndex(0)
                        ->setCellValue($letras[0] . $i, $factura->codigo)
                        ->setCellValue($letras[1] . $i, $factura->nombrecliente)
                        ->setCellValue($letras[2] . $i, date('d-m-Y', strtotime($factura->fecha)))
                        ->setCellValue($letras[3] . $i, date('d-m-Y', strtotime($factura->vencimiento)))
                        ->setCellValue($letras[4] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($factura->total()->total))
                        ->setCellValue($letras[5] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($factura->pagado()))
                        ->setCellValue($letras[6] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($factura->porpagar()));
                    $i++;
                }
            }

            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[6] . $i, "TOTAL A COBRAR: ")
                ->setCellValue($letras[7] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($totalPagar));


            $estilo = array('font' => array('size' => 12, 'name' => 'Times New Roman'),
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
            $objPHPExcel->getActiveSheet()->getStyle('A3:G' . $i)->applyFromArray($estilo);


            for ($i = 'A'; $i <= $letras[20]; $i++) {
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
            }

            // Se asigna el nombre a la hoja
            $objPHPExcel->getActiveSheet()->setTitle('Reporte de cuentas por cobrar');

            // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
            $objPHPExcel->setActiveSheetIndex(0);

            // Inmovilizar paneles
            $objPHPExcel->getActiveSheet(0)->freezePane('A2');
            $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0, 4);
            $objPHPExcel->setActiveSheetIndex(0);
            header("Pragma: no-cache");
            header('Content-type: application/vnd.ms-excel');
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment;filename="Reporte_Cuentas_Cobrar.xlsx"');
            header('Cache-Control: max-age=0');
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save('php://output');
            exit;
        }
    }

    public function remisionesCobrar($request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de cuentas por cobrar remisiones ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Numero', 'Cliente', 'Creacion', 'Vencimiento', 'Total', 'Pagado', 'Por Pagar');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Cuentas Por Cobrar") // Titulo
        ->setSubject("Reporte Excel Cuentas Por Cobrar") //Asunto
        ->setDescription("Reporte Excel Cuentas Por Cobrar") //Descripci���n
        ->setKeywords("reporte cuentas por cobrar") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:F1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:G3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $dates = $this->setDateRequest($request);
        $remisiones = Remision::where('empresa', Auth::user()->empresa)
            ->where('fecha', '<=', $dates['fin'])
            ->where('fecha', '>=', $dates['inicio'])
            ->get();

        $totalPagar = 0;
        $remisionesCobrar = array();
        foreach ($remisiones as $remision){
            if($remision->pagado() < $remision->porpagar()){
                $remision->clienteNombre = $remision->cliente()->nombre;
                $remision->clienteId = $remision->cliente()->id;
                $remisionesCobrar[] = $remision;
                $totalPagar += $remision->porPagar();
            }
        }
        $facturas = array();
        if(count($remisiones) > 0){
            $facturas = $this->orderMultiDimensionalArray($remisionesCobrar, 'nro', true);
        }

        $i = 4;
        foreach ($facturas as $factura) {
            if (Funcion::Parsear($factura->porpagar()) > 0) {
                $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue($letras[0] . $i, $factura->nro)
                    ->setCellValue($letras[1] . $i, $factura->clienteNombre)
                    ->setCellValue($letras[2] . $i, date('d-m-Y', strtotime($factura->fecha)))
                    ->setCellValue($letras[3] . $i, date('d-m-Y', strtotime($factura->vencimiento)))
                    ->setCellValue($letras[4] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($factura->total()->total))
                    ->setCellValue($letras[5] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($factura->pagado()))
                    ->setCellValue($letras[6] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($factura->porpagar()));
                $i++;
            }
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[6] . $i, "TOTAL A COBRAR: ")
            ->setCellValue($letras[7] . $i, Auth::user()->empresa()->moneda . " " . Funcion::Parsear($totalPagar));


        $estilo = array('font' => array('size' => 12, 'name' => 'Times New Roman'),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:G' . $i)->applyFromArray($estilo);


        for ($i = 'A'; $i <= $letras[20]; $i++) {
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de cuentas por cobrar');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0, 4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Cuentas_Cobrar.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }

    public function cuentasPagar(Request $request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de cuentas por pagar ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Numero', 'Factura', 'Proveedor', 'Creación', 'Vencimiento', 'Total', 'Pagado', 'Por Pagar');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Cuentas Por Pargar") // Titulo
        ->setSubject("Reporte Excel Cuentas Por Pargar") //Asunto
        ->setDescription("Reporte Excel Cuentas Por Pargar") //Descripci���n
        ->setKeywords("reporte cuentas por pagar") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:H1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:H3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        //Si no hay fecha establecida dentro de la url se establece desde el 1 al 30/31 del mes actual
        if (!$request->fecha) {
            $month = date('m');
            $year = date('Y');
            $day = date("d", mktime(0,0,0, $month+1, 0, $year));
            $fin= date('Y-m-d', mktime(0,0,0, $month, $day, $year));
            $request->hasta=date('d-m-Y', mktime(0,0,0, $month, $day, $year));
            $month = date('m');
            $year = date('Y');
            $inicio=  date('Y-m-d', mktime(0,0,0, $month, 1, $year));
            $request->fecha=date('d-m-Y', mktime(0,0,0, $month, 1, $year));
        }
        else{
            $inicio= date('Y-m-d', strtotime($request->fecha));
            $fin= date('Y-m-d', strtotime($request->hasta));
        }

        //Aquí se obtienen los datos para imprimir en .xls
        //Código base tomado de FacturaspController@index

        $campos=array('', 'factura_proveedores.nro', 'factura_proveedores.codigo', 'nombrecliente', 'factura_proveedores.fecha_factura','factura_proveedores.vencimiento_factura',  'total',  'total',  'total');
        if (!$request->orderby) {
            $request->orderby=1; $request->order=1;
        }

        $orderby=$campos[$request->orderby];
        $order=$request->order==1?'DESC':'ASC';
        $facturas=FacturaProveedores::leftjoin('contactos as c', 'factura_proveedores.proveedor', '=', 'c.id')
            ->join('items_factura_proveedor as if', 'factura_proveedores.id', '=', 'if.factura')
            ->select('factura_proveedores.id', 'factura_proveedores.tipo',  'factura_proveedores.codigo', 'factura_proveedores.nro', DB::raw('c.nombre as nombrecliente'), 'factura_proveedores.proveedor', 'factura_proveedores.fecha_factura', 'factura_proveedores.vencimiento_factura', 'factura_proveedores.estatus',
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) as total'),
                DB::raw('((Select SUM(pago) from ingresos_factura where factura=factura_proveedores.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura_proveedores.id)) as pagado'),
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant)-((Select if(SUM(pago), SUM(pago), 0) from ingresos_factura where factura=factura_proveedores.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura_proveedores.id))  as porpagar'))
            ->where('factura_proveedores.empresa',Auth::user()->empresa)->where('factura_proveedores.tipo',1)
            ->where('factura_proveedores.fecha_factura', ">=", $inicio)
            ->where('factura_proveedores.fecha_factura', "<=", $fin)
            ->groupBy('if.factura')->OrderBy($orderby, $order)->get();

        /*
         * ->appends(['orderby'=>$request->orderby, 'order'=>$request->order])
         * SE COMENTA ESTA LINEA DEBIDO A ERROR AL EXPORTAR EXCEL HASTA POSIBLE SOLICION DEL ERROR
         * */

        //Se determina el gran total
        $totalPagar = 0;
        foreach ($facturas as $factura){
            $totalPagar += $factura->porPagar();
        }

        $i=4;
        foreach ($facturas as $factura) {

            if(Funcion::Parsear($factura->porpagar()) > 0 ){
                $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue($letras[0].$i, $factura->nro)
                    ->setCellValue($letras[1].$i, $factura->codigo)
                    ->setCellValue($letras[2].$i, $factura->proveedor()->nombre)
                    ->setCellValue($letras[3].$i, date('d-m-Y', strtotime($factura->fecha_factura)))
                    ->setCellValue($letras[4].$i, date('d-m-Y', strtotime($factura->vencimiento_factura)))
                    ->setCellValue($letras[5].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->total()->total))
                    ->setCellValue($letras[6].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($factura->pagado()))
                    ->setCellValue($letras[7].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($factura->porpagar()));
                $i++;
            }
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[6].$i, "TOTAL A PAGAR: ")
            ->setCellValue($letras[7].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($totalPagar));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:H'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de cuentas por pagar');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Cuentas_Pagar.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;

    }

    public function compras(Request $request)
    {

        $objPHPExcel = new PHPExcel();
        $tituloReporte = "Reporte de compras ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Numero', 'Proveedor', 'Creación', 'Total');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Compras") // Titulo
        ->setSubject("Reporte Excel Compras") //Asunto
        ->setDescription("Reporte Excel Compras") //Descripci���n
        ->setKeywords("reporte cuentas compras") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:E1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($estilo);


        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }


        $dates = $this->setDateRequest($request);

        //Código base tomado de FacturaspController@index

        $campos=array('', 'factura_proveedores.nro', 'factura_proveedores.codigo', 'nombrecliente', 'factura_proveedores.fecha_factura','factura_proveedores.vencimiento_factura',  'total',  'total',  'total');
        if (!$request->orderby) {
            $request->orderby=1; $request->order=1;
        }
        $orderby=$campos[$request->orderby];
        $order=$request->order==1?'DESC':'ASC';
        $facturas=FacturaProveedores::leftjoin('contactos as c', 'factura_proveedores.proveedor', '=', 'c.id')
            ->join('items_factura_proveedor as if', 'factura_proveedores.id', '=', 'if.factura')
            ->select('factura_proveedores.id', 'factura_proveedores.tipo',  'factura_proveedores.codigo', 'factura_proveedores.nro', DB::raw('c.nombre as nombrecliente'), 'factura_proveedores.proveedor', 'factura_proveedores.fecha_factura', 'factura_proveedores.vencimiento_factura', 'factura_proveedores.estatus',
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) as total'),
                DB::raw('((Select SUM(pago) from ingresos_factura where factura=factura_proveedores.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura_proveedores.id)) as pagado'),
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant)-((Select if(SUM(pago), SUM(pago), 0) from ingresos_factura where factura=factura_proveedores.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura_proveedores.id))  as porpagar'))
            ->where('factura_proveedores.empresa',Auth::user()->empresa)
            ->where('factura_proveedores.fecha_factura', ">=", $dates['inicio'])
            ->where('factura_proveedores.fecha_factura', "<=", $dates['fin'])
            ->where('factura_proveedores.tipo',1)->groupBy('if.factura')
            ->OrderBy($orderby, $order)->paginate(1000000)
            ->appends(['orderby'=>$request->orderby, 'order'=>$request->order]);

        //Se determina el gran total
        $totalPagar = 0;
        foreach ($facturas as $factura){
            $totalPagar += $factura->total()->total;
        }


        $i=4;
        foreach ($facturas as $factura) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $factura->nro)
                ->setCellValue($letras[1].$i, $factura->codigo)
                ->setCellValue($letras[2].$i, $factura->proveedor()->nombre)
                ->setCellValue($letras[3].$i, date('d-m-Y', strtotime($factura->fecha_factura)))
                ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->total()->total));
            $i++;
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[3].$i, "TOTAL: ")
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($totalPagar));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de compras');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Compras.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;

    }

    public function estadoCliente(Request $request)
    {

        //Se obtienen los datos del cliente
        $client = Contacto::find($request->client);
        $nombre = $client->nombre;
        $nit = $client->nit;

        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte de estado de cuenta cliente $nombre - $nit || ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Numero', 'Tipo documen', 'Creación', 'Vencimiento', 'Dias vencidos', 'Estado', 'Total',
            'Pagado', 'Por pagar');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Estado Cuenta") // Titulo
        ->setSubject("Reporte Excel Estado Cuenta") //Asunto
        ->setDescription("Reporte Excel Estado Cuenta") //Descripci���n
        ->setKeywords("reporte cuentas estado cuenta") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:I1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:I1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:I3')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        //Se empieza con la recolecta de datos
        $dates = $this->setDateRequest($request);

        $facturas=Factura::join('contactos as c', 'factura.cliente', '=', 'c.id')
            ->join('items_factura as if', 'factura.id', '=', 'if.factura')
            ->select('factura.id', 'factura.codigo', 'factura.tipo', 'factura.nro', DB::raw('c.nombre as nombrecliente'), 'factura.cliente', 'factura.fecha', 'factura.vencimiento', 'factura.estatus',
                DB::raw('SUM(
      (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) as total'),
                DB::raw('((Select SUM(pago) from ingresos_factura where factura=factura.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura.id)) as pagado'),
                DB::raw('(SUM(
          (if.cant*if.precio)-(if.precio*(if(if.desc,if.desc,0)/100)*if.cant)+(if.precio-(if.precio*(if(if.desc,if.desc,0)/100)))*(if.impuesto/100)*if.cant) -  ((Select SUM(pago) from ingresos_factura where factura=factura.id) + (Select if(SUM(valor), SUM(valor), 0) from ingresos_retenciones where factura=factura.id)) - (Select if(SUM(pago), SUM(pago), 0) from notas_factura where factura=factura.id) )    as porpagar'))
            ->where('factura.empresa',Auth::user()->empresa)
            ->where('factura.fecha', ">=", $dates['inicio'])
            ->where('factura.fecha', "<=", $dates['fin'])
            ->where('factura.cliente', $client->id)
            ->groupBy('if.factura')
            ->get();
        $i=4;
        foreach ($facturas as $factura) {
            $tipo = $factura->tipo == 1 ? "Factura" : "Cotización";
            $time = \App\Funcion::diffDates(date('Y-m-d'), $factura->vencimiento);
            $pay = $factura->porpagar() - $factura->pagado() > 0  ? "Por pagar" : "Pagado";
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $factura->codigo)
                ->setCellValue($letras[1].$i, $tipo)
                ->setCellValue($letras[2].$i, date('d-m-Y', strtotime($factura->fecha)))
                ->setCellValue($letras[3].$i, date('d-m-Y', strtotime($factura->vencimiento)))
                ->setCellValue($letras[4].$i, $pay)
                ->setCellValue($letras[5].$i, $time)
                ->setCellValue($letras[6].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->total()->total))
                ->setCellValue($letras[7].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->pagado()))
                ->setCellValue($letras[8].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($factura->porpagar()));
            $i++;
        }

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:I'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de estado de cuenta');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Estado_Cliente.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;

    }

    public function reporteDiario(Request $request)
    {
        $formatDate = date('Y-m-d H:i:s', strtotime($request->date));
        $Ifacturas = IngresosFactura::all();
        $first;
        $last;
        $nombreEmpresa = Empresa::where('id', Auth::user()->empresa)->first()->nombre;
        $nitEmpresa = Empresa::where('id', Auth::user()->empresa)->first()->nit;
        $metodosPagoIngreso = array(
            'Efectivo'          => 0,
            'Transferencia'     => 0,
            'Consignación'      => 0,
            'Cheque'            => 0,
            'Tarjeta crédito'   => 0,
            'Tarjeta débito'    => 0,
        );
        $total = 0;
        $gravada = 0;
        $NoGravada = 0;
        //Se obtienen los ingresos del día sacados de ingresos_factura e ingresos
        if(count($Ifacturas) > 0 ){
            foreach ($Ifacturas as $factura){
                $ingreso = Ingreso::where('id', $factura->ingreso)
                    ->where('empresa', Auth::user()->empresa)
                    ->where('fecha', $formatDate)
                    ->first();
                if(isset($ingreso)){
                    $metodosPagoIngreso[$ingreso->metodo_pago()] += $factura->pago();
                    $total += $factura->pago();
                }
                /*
                foreach ($factura->itemFactura() as $itemFactura){
                    if($itemFactura->impuesto > 0 ){
                    }
                }
                */
            }

        }else{
            return redirect()->route('reportes.index')->with('notify', "No hay ventas registradas el $formatDate");
        }

        $facturas = Factura::where('fecha', "=", $formatDate)
                        ->where('empresa', Auth::user()->empresa)->get();

        //Se obtinene las facturas del día
        if(count($facturas) > 0){

            if (count($facturas) == 1){
                $first = $facturas->first()->codigo;
                $last = $facturas->first()->codigo;

            }else{
                $first = $facturas->first()->codigo;
                $last = $facturas->last()->codigo;
            }

        }else{
            $first = 0;
            $last = 0;
        }

        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte diario de ventas $nombreEmpresa - $nitEmpresa || FECHA: $formatDate";
        $titulosColumnas = array('Efectivo','Transferencia', 'Consignacion', 'Cheque', 'Tarjeta de credito', 'Tarjeta de debito');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ventas Diarias") // Titulo
        ->setSubject("Reporte Excel Ventas Diarias") //Asunto
        ->setDescription("Reporte Excel Ventas Cliente") //Descripci���n
        ->setKeywords("reporte cuentas ventas diarias") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta H1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:H1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        //Estilo cabecera
        $objPHPExcel->getActiveSheet()->getStyle('A1:F1')->applyFromArray($estilo);
        //Estilo titulos
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:F3')->applyFromArray($estilo);
        $objPHPExcel->getActiveSheet()->getStyle('A6')->applyFromArray($estilo);
        $objPHPExcel->getActiveSheet()->getStyle('A7')->applyFromArray($estilo);
        $objPHPExcel->getActiveSheet()->getStyle('D6')->applyFromArray($estilo);
        $objPHPExcel->getActiveSheet()->getStyle('D7')->applyFromArray($estilo);
        $objPHPExcel->getActiveSheet()->getStyle('D8')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {
            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $i=4;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($metodosPagoIngreso['Efectivo']))
            ->setCellValue($letras[1].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($metodosPagoIngreso['Transferencia']))
            ->setCellValue($letras[2].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($metodosPagoIngreso['Consignación']))
            ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($metodosPagoIngreso['Cheque']))
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($metodosPagoIngreso['Tarjeta crédito']))
            ->setCellValue($letras[5].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($metodosPagoIngreso['Tarjeta débito']));
        $i++;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, " ")
            ->setCellValue($letras[1].$i, " ")
            ->setCellValue($letras[2].$i, " ")
            ->setCellValue($letras[3].$i, " ")
            ->setCellValue($letras[4].$i, " ");
        $i++;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, "Factura Inicial: ")
            ->setCellValue($letras[1].$i, $first)
            ->setCellValue($letras[3].$i, "Ventas gravadas: " )
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear(0));
        $i++;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, "Factura final: ")
            ->setCellValue($letras[1].$i, $last)
            ->setCellValue($letras[3].$i, "Ventas no gravadas: ")
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear(0));
        $i++;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[3].$i, "Total: ")
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda ." ". Funcion::Parsear($total));



        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:I'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de ventas día');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ventas_Dia.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;

    }

    public function ventasVendedor(Request $request)
    {

        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte de ventas por vendedor desde ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Vendedor', 'Numero de facturas', 'Pagado', 'Antes de impuestos', 'Total');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ventas Vendedor") // Titulo
        ->setSubject("Reporte Excel Ventas Vendedor") //Asunto
        ->setDescription("Reporte Excel Ventas Vendedor") //Descripci���n
        ->setKeywords("reporte cuentas ventas vendedor") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:D1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $dates = $this->setDateRequest($request);
        $vendedores = Vendedor::where('empresa',Auth::user()->empresa)->where('estado',1)->get();
        $totales = array(
            'pagado'    => 0,
            'subtotal'  => 0,
            'total'     => 0,
        );
        foreach ($vendedores as $vendedore){
            $totales['pagado'] += $vendedore->pagosFecha($dates['inicio'], $dates['fin']);
            $totales['subtotal'] += $vendedore->montoTotal($dates['inicio'], $dates['fin'])['subtotal'];
            $totales['total'] += $vendedore->montoTotal($dates['inicio'], $dates['fin'])['total'];
        }

        $i=4;
        foreach ($vendedores as $vendedor) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $vendedor->nombre)
                ->setCellValue($letras[1].$i, $vendedor->nroFacturas($dates['inicio'], $dates['fin']))
                ->setCellValue($letras[2].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($vendedor->pagosFecha($dates['inicio'], $dates['fin'])))
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($vendedor->montoTotal($dates['inicio'], $dates['fin'])['subtotal']))
                ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($vendedor->montoTotal($dates['inicio'], $dates['fin'])['total']));
            $i++;
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[2].$i, "Pagado: " . Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['pagado']))
            ->setCellValue($letras[3].$i, "Subtotal: " . Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['subtotal']))
            ->setCellValue($letras[4].$i, "Total: " . Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['total']));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de ventas por vendedor');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ventas_Vendedor.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }

    public function rentabilidadItem(Request $request)
    {

        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte de rentabilidad de items ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Item', 'Referencia', 'Total vendido', 'Costo total', 'Rentabilidad', 'Porcentaje');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Rentabilidad Items") // Titulo
        ->setSubject("Reporte Excel Rentabilidad Items") //Asunto
        ->setDescription("Reporte Excel Rentabilidad Items") //Descripci���n
        ->setKeywords("reporte cuentas rentabilidad items") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:D1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:F1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:F3')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $dates = $this->setDateRequest($request);
        $items = Inventario::where('empresa', Auth::user()->empresa)
            ->where('tipo_producto', 1)
            ->get();
        $totales = array(
            'totalVendidos'         => 0,
            'costosTotales'         => 0,
            'rentabilidadtotal'     => 0,
        );

        foreach ($items as $item){
            $facturas = Factura::where('empresa', Auth::user()->empresa)
                ->where('fecha', '>=', $dates['inicio'])
                ->whereNull('cot_nro')
                ->where('fecha', '<=', $dates['fin'])
                ->get();
            $item->totalVendido = 0;
            $item->vendidos = count($facturas);

            if(!count($facturas) == 0){
                foreach ($facturas as $factura){
                    $itemFacturas = ItemsFactura::where('factura', $factura->id)
                        ->where('producto', $item->id)
                        ->get();

                    if(!count($itemFacturas) == 0){
                        foreach ($itemFacturas as $itemFactura){
                            $item->totalVendido+= $itemFactura->totalImp();
                        }
                    }

                }
            }

            if($item->totalVendido == 0){
                $item->costoTotal   = 0;
                $item->rentabilidad = 0;
                $item->porcentaje   = 0;

            }else{
                $item->costoTotal   = $item->vendidos * $item->costo_unidad;
                $item->rentabilidad = $item->totalVendido - $item->costoTotal;
                $item->porcentaje   = ($item->rentabilidad/$item->totalVendido)*100;

            }

            $totales['totalVendidos']        += $item->totalVendido;
            $totales['rentabilidadtotal']    += $item->rentabilidad;
            $totales['costosTotales']        += $item->costoTotal;


        }
        $items = $this->orderMultiDimensionalArray($items, 'totalVendido', true);

        $i=4;
        foreach ($items as $item) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, substr($item->producto, 0, 31))
                ->setCellValue($letras[1].$i, $item->ref)
                ->setCellValue($letras[2].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($item->totalVendido))
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($item->costoTotal))
                ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($item->rentabilidad))
                ->setCellValue($letras[5].$i, Funcion::Parsear($item->porcentaje)."%");
            $i++;
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[2].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['totalVendidos']))
            ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['costosTotales']))
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['rentabilidadtotal']));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:F'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de ventas por vendedor');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ventas_Vendedor.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;

    }

    public function transacciones(Request $request)
    {
        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte de transacciones ".$request->fecha." hasta ".$request->hasta;

        $titulosColumnas = array('Fecha', 'Comprobante', 'Cuenta', 'Categoría', 'Estado', 'Salida', 'Entrada');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Transacciones") // Titulo
        ->setSubject("Reporte Excel Transacciones") //Asunto
        ->setDescription("Reporte Excel Transacciones") //Descripci���n
        ->setKeywords("reporte cuentas Transacciones") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:D1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:G3')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $dates = $this->setDateRequest($request);

        //Código base tomado de datatable_movimientos

        $movimientos= Movimiento::leftjoin('contactos as c', 'movimientos.contacto', '=', 'c.id')
            ->select('movimientos.*', DB::raw('if(movimientos.contacto,c.nombre,"") as nombrecliente'))
            ->where('fecha', '>=', $dates['inicio'])
            ->where('fecha', '<=', $dates['fin'])
            ->where('movimientos.empresa',Auth::user()->empresa);



        $movimientos=  $movimientos->orderBy('fecha', 'DESC')->get();

        $totales = array(
            'salida'    => 0,
            'entrada'   => 0
        );

        foreach ($movimientos as $movimientoT){
            $totales['salida']  += $movimientoT->tipo==2?$movimientoT->saldo:0;
            $totales['entrada']  += $movimientoT->tipo==1?$movimientoT->saldo:0;
        }

        $i=4;
        foreach ($movimientos as $movimiento) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, date('d-m-Y', strtotime($movimiento->fecha)))
                ->setCellValue($letras[1].$i, $movimiento->id)
                ->setCellValue($letras[2].$i, $movimiento->banco()->nombre)
                ->setCellValue($letras[3].$i, $movimiento->categoria())
                ->setCellValue($letras[4].$i, $movimiento->estatus())
                ->setCellValue($letras[5].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($movimiento->tipo==2?$movimiento->saldo:0))
                ->setCellValue($letras[6].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($movimiento->tipo==1?$movimiento->saldo:0));
            $i++;
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[5].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['salida']))
            ->setCellValue($letras[6].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($totales['entrada']));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:G'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de transacciones');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Transacciones.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }

    public function valorActual(Request $request)
    {

        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte de valor actual del inventario";

        $titulosColumnas = array('Item', 'Referencia', 'Descripcion', 'Cantidad', 'Unidad', 'Estado', 'Costo', 'Total');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Valor Actual") // Titulo
        ->setSubject("Reporte Excel Valor Actual") //Asunto
        ->setDescription("Reporte Excel Valor Actual") //Descripci���n
        ->setKeywords("reporte cuentas Valor Actual") //Etiquetas
        ->setCategory("Reporte excel"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:H1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:H1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:H3')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }
        //Inyeccion de datos
        $bodega = Bodega::where('empresa',Auth::user()->empresa)
            ->where('status', 1)
            ->where('id', $request->bodega)->first();
        $bodegas = Bodega::where('empresa',Auth::user()->empresa)
            ->where('status', 1)->get();
        if (!$bodega) {
            $bodega = Bodega::where('empresa',Auth::user()->empresa)
                ->where('status', 1)
                ->first();
        }
        if(!$request->bodega || $request->bodega == "all"){
            $request->bodega = 'all';
            $productos = Inventario::select('*')
                ->whereIn('id', function ($query){
                    $query->select('producto')
                        ->from(with(new ProductosBodega)->getTable())
                        ->where('empresa', Auth::user()->empresa);
                })->get();

        }else{
            $productos = Inventario::select('*')
                ->whereIn('id', function ($query) use ($bodega){
                    $query->select('producto')
                        ->from(with(new ProductosBodega)->getTable())
                        ->where('bodega', $bodega->id)
                        ->where('empresa', Auth::user()->empresa);
                })->get();

        }

        $total = 0;
        foreach ($productos as $producto){
            $producto->precio = $this->precision($producto->precio);
            $producto->costo_unidad=$this->precision($producto->costo_unidad);
            $producto->inventario = $request->bodega != "all" ? $producto->inventarioBodega($bodega->id) : $producto->inventario();
            $producto->total = $producto->costo_unidad * $producto->inventario;
            $total += $producto->costo_unidad * $producto->inventario;
        }

        $productos = $this->orderMultiDimensionalArray($productos,'total', true);
        $i=4;
        foreach ($productos as $producto) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $producto->producto)
                ->setCellValue($letras[1].$i, $producto->ref)
                ->setCellValue($letras[2].$i, $producto->descripcion)
                ->setCellValue($letras[3].$i, $producto->inventario)
                ->setCellValue($letras[4].$i, $producto->unidad())
                ->setCellValue($letras[5].$i, $producto->status())
                ->setCellValue($letras[6].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($producto->costo_unidad))
                ->setCellValue($letras[7].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($producto->costo_unidad * $producto->inventario));
            $i++;
        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[7].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($total));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:H'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte valor actual');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Valor_Actual.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }

    public function ingresosEgresos(Request $request)
    {

        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte de ingresos/egresos";

        $titulosColumnas = array('Categoria', 'Total');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Ingresos Egresos") // Titulo
        ->setSubject("Reporte Excel Ingresos Egresos") //Asunto
        ->setDescription("Reporte Excel Ingresos Egresos") //Descripci���n
        ->setKeywords("reporte cuentas Ingresos Egresos") //Etiquetas
        ->setCategory("Reporte excel ingresos egresos"); //Categorias
        // Se combinan las celdas A1 hasta D1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:B1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        $objPHPExcel->getActiveSheet()->getStyle('A1:B1')->applyFromArray($estilo);
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A3:B3')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {

            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'3', utf8_decode($titulosColumnas[$i]));
        }

        $dates = $this->setDateRequest($request);

        $gastos     = $this->egresos($dates);
        $ingresos   = $this->ingresos($dates);

        $i=4;
        foreach ($ingresos as $ingreso) {
            if(!empty($ingreso['nombre'])){
                $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue($letras[0].$i, $ingreso['nombre'])
                    ->setCellValue($letras[1].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($ingreso['total']));
                $i++;
            }

        }

        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[1].$i, "Ingresos: ".Auth::user()->empresa()->moneda.' '.Funcion::Parsear($ingresos['ingresos']));
        $i+=2;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, "Categoria")
            ->setCellValue($letras[1].$i, "Ingresos");
        $objPHPExcel->getActiveSheet()->getStyle($letras[0].$i)->applyFromArray($estilo);
        $objPHPExcel->getActiveSheet()->getStyle($letras[1].$i)->applyFromArray($estilo);
        $i++;
        foreach ($gastos as $gasto) {
            if(!empty($gasto['nombre'])){
                $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue($letras[0].$i, $gasto['nombre'])
                    ->setCellValue($letras[1].$i, Auth::user()->empresa()->moneda.' '.Funcion::Parsear($gasto['total']));
                $i++;
            }
        }
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[1].$i, "Egresos: ".Auth::user()->empresa()->moneda.' '.Funcion::Parsear($gastos['gasto']));

        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:B'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte ingreso egresos');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_Ingresos_Egresos.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;

    }

    private function egresos($dates, $noData = false)
    {
        //Se obtienen todas las facturas de proveedores dentro de la fecha correspondinete
        $itemsFacturas = ItemsFacturaProv::select('*')
            ->whereIn('factura', function($query) use ($dates){
                $query->select('id')
                    ->from(with(new FacturaProveedores)->getTable())
                    ->where('fecha_factura', '<=', $dates['fin'])
                    ->where('fecha_factura', '>=', $dates['inicio'])
                    ->where('empresa', Auth::user()->empresa);
            })->get();
        $gastosItem = GastosCategoria::select('*')
            ->whereIn('gasto', function ($query) use ($dates){
                $query->select('id')
                    ->from(with(new Gastos)->getTable())
                    ->where('fecha' ,'<=', $dates['fin'])
                    ->where('fecha' ,'>=', $dates['inicio'])
                    ->where('empresa', Auth::user()->empresa);
            })->get();
        $categoriaGasto = array();
        $categoriaGasto ['gasto'] = 0;
        //Se filtra por tipo de item y se agrupan su total por categoria
        foreach ($itemsFacturas as $itemsFactura){
            if($itemsFactura->tipo_item == 1) {
                $categoria = $itemsFactura->productoTotal()->categoriaId();
            }
            else{
                $categoria = $itemsFactura->producto(true);
            }
            if(!isset($categoriaGasto[$categoria->id])){
                $categoriaGasto[$categoria->id]['nombre']        = $categoria->nombre;
                $categoriaGasto[$categoria->id]['descripcion']   = $categoria->descripcion;
                $categoriaGasto[$categoria->id]['total']         = $itemsFactura->totalImp();
                $categoriaGasto[$categoria->id]['id']         = $categoria->id;
                $categoriaGasto ['gasto']                        += $itemsFactura->totalImp();
            }else{
                $categoriaGasto[$categoria->id]['total'] += $itemsFactura->totalImp();
                $categoriaGasto ['gasto']                += $itemsFactura->totalImp();
            }

        }
        if(count($gastosItem) > 0 )
        {
            foreach ($gastosItem as $gastoItem)
            {
                if(!isset($categoriaGasto[$gastoItem->categoria])){
                    $categoriaGasto[$gastoItem->categoria]['nombre']        = $gastoItem->categoria(true);
                    $categoriaGasto[$gastoItem->categoria]['descripcion']   = $gastoItem->detalleCat()->descripcion;
                    $categoriaGasto[$gastoItem->categoria]['total']         = $gastoItem->pago();
                    $categoriaGasto ['gasto']                               += $gastoItem->pago();
                }else{
                    $categoriaGasto[$gastoItem->categoria]['total'] += $gastoItem->pago();
                    $categoriaGasto ['gasto']                += $gastoItem->pago();
                }
            }
        }
        return $categoriaGasto;
    }

    private function ingresos($dates)
    {
        //Se obtienen todas las facturas dentro de la fecha correspondinete
        $itemsFacturas = ItemsFactura::select('*')
            ->whereIn('factura', function($query) use ($dates){
                $query->select('id')
                    ->from(with(new Factura)->getTable())
                    ->where('fecha', '<=', $dates['fin'])
                    ->where('fecha', '>=', $dates['inicio'])
                    ->where('empresa', Auth::user()->empresa);
            })->get();
        $ingresosItem = IngresosCategoria::select('*')
            ->whereIn('ingreso', function ($query) use ($dates){
                $query->select('id')
                    ->from(with(new Ingreso)->getTable())
                    ->where('fecha', '<=', $dates['fin'])
                    ->where('fecha', '>=', $dates['inicio'])
                    ->where('empresa', Auth::user()->empresa);
            })->get();

        $categoriaGanancia = array();
        $categoriaGanancia ['ingresos'] = 0;
        //Se filtra por tipo de item y se agrupan su total por categoria
        foreach ($itemsFacturas as $itemsFactura){
            if($itemsFactura->tipo_inventario == 1){
                $categoria = $itemsFactura->productoTotal()->categoriaId();
                if(!isset($categoriaGanancia[$categoria->id])){
                    $categoriaGanancia[$categoria->id]['nombre']        = $categoria->nombre;
                    $categoriaGanancia[$categoria->id]['descripcion']   = $categoria->descripcion;
                    $categoriaGanancia[$categoria->id]['total']         = $itemsFactura->totalImp();
                    $categoriaGanancia ['ingresos']                     += $itemsFactura->totalImp();
                }else{
                    $categoriaGanancia[$categoria->id]['total'] += $itemsFactura->totalImp();
                    $categoriaGanancia ['ingresos']             += $itemsFactura->totalImp();
                }
            }
        }

        if (count($ingresosItem) > 0)
        {
            foreach ($ingresosItem as $ingresoItem)
            {
                if(!isset($categoriaGanancia[$ingresoItem->categoria])){
                    $categoriaGanancia[$ingresoItem->categoria]['nombre']        = $ingresoItem->categoria(true);
                    $categoriaGanancia[$ingresoItem->categoria]['descripcion']   = $ingresoItem->categoria()->descripcion;
                    $categoriaGanancia[$ingresoItem->categoria]['total']         = $ingresoItem->pago();
                    $categoriaGanancia ['ingresos']                              += $ingresoItem->pago();
                }else{
                    $categoriaGanancia[$ingresoItem->categoria]['total'] += $ingresoItem->pago();
                    $categoriaGanancia ['ingresos']                += $ingresoItem->pago();
                }
            }
        }
        return $categoriaGanancia;
    }

    public function categorias(Request $request)
    {
        $dates      = $this->setDateRequest($request);
        $categorias = Categoria::where('empresa',Auth::user()->empresa)
            ->where('estatus', 1)
            ->get();

        if($request->categoria)
        {
            $inventario = Inventario::where('empresa', Auth::user()->empresa)
                ->where('categoria', $request->categoria)
                ->get();
        }
        else
        {
            $inventario = Inventario::where('empresa', Auth::user()->empresa)
                ->where('categoria', Auth::user()->empresa()->categoria_default)
                ->get();
            $request->categoria = Categoria::where('empresa', Auth::user()->empresa)->where('nombre', 'Activos')
                ->get()->first()->id;
        }

        $ingresos           = $this->ingresos($dates);
        $egresos            = $this->egresos($dates);
        $categoriadata      = Categoria::find($request->categoria);
        $cantidadInventario = $inventario->count();
        $codigo             = $categoriadata == '' ? '...' : Categoria::find($request->categoria)->codigo;

        if(!isset($ingresos[$request->categoria]))
        {
            $ingresos[$request->categoria]['total']  = 0;

        }
        if(!isset($egresos[$request->categoria]))
        {
            $egresos[$request->categoria]['total'] = 0;

        }


        $objPHPExcel = new PHPExcel();

        $tituloReporte = "Reporte diario de categoria: $categoriadata->nombre";
        $titulosColumnas = array('Referencia','Producto', 'Precio', 'Disp', 'Estatus web');
        $letras= array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        $objPHPExcel->getProperties()->setCreator("Sistema") // Nombre del autor
        ->setLastModifiedBy("Sistema") //Ultimo usuario que lo modific���
        ->setTitle("Reporte Excel Categoria") // Titulo
        ->setSubject("Reporte Excel Categoria") //Asunto
        ->setDescription("Reporte Excel Categoria") //Descripci���n
        ->setKeywords("reporte cuentas categoria") //Etiquetas
        ->setCategory("Reporte excel categoria"); //Categorias
        // Se combinan las celdas A1 hasta H1, para colocar ah��� el titulo del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->mergeCells('A1:E1');
        // Se agregan los titulos del reporte
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1',$tituloReporte);
        $estilo = array('font'  => array('bold'  => true, 'size'  => 12, 'name'  => 'Times New Roman' ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ));
        //Estilo cabecera
        $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($estilo);
        //Estilo titulos
        $estilo =array('fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'color' => array('rgb' => 'd08f50')));
        $objPHPExcel->getActiveSheet()->getStyle('A7:F7')->applyFromArray($estilo);

        for ($i=0; $i <count($titulosColumnas) ; $i++) {
            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letras[$i].'7', utf8_decode($titulosColumnas[$i]));
        }
        $i=4;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, "CODIGO" )
            ->setCellValue($letras[1].$i, "NOMBRE")
            ->setCellValue($letras[2].$i, "# ITEMS")
            ->setCellValue($letras[3].$i, "INGRESOS")
            ->setCellValue($letras[4].$i, "EGRESOS");
        $i=5;
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($letras[0].$i, $codigo )
            ->setCellValue($letras[1].$i, $categoriadata->nombre)
            ->setCellValue($letras[2].$i, $cantidadInventario)
            ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($ingresos[$request->categoria]['total']))
            ->setCellValue($letras[4].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($egresos[$request->categoria]['total']));
        $i=8;
        foreach ($inventario as $producto) {
            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($letras[0].$i, $producto->ref)
                ->setCellValue($letras[1].$i, $producto->producto)
                ->setCellValue($letras[3].$i, Auth::user()->empresa()->moneda." ".Funcion::Parsear($producto->precio))
                ->setCellValue($letras[4].$i, ($producto->tipo_producto==1)?$producto->inventario()." ".$producto->unidad(true):'N/A')
                ->setCellValue($letras[4].$i, (Auth::user()->empresa()->carrito==1 ? $producto->web() : ""));
            $i++;
        }

        $i++;
        $estilo =array('font'  => array('size'  => 12, 'name'  => 'Times New Roman' ),
            'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,));
        $objPHPExcel->getActiveSheet()->getStyle('A3:E'.$i)->applyFromArray($estilo);


        for($i = 'A'; $i <= $letras[20]; $i++){
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($i)->setAutoSize(TRUE);
        }

        // Se asigna el nombre a la hoja
        $objPHPExcel->getActiveSheet()->setTitle('Reporte de categoria');

        // Se activa la hoja para que sea la que se muestre cuando el archivo se abre
        $objPHPExcel->setActiveSheetIndex(0);

        // Inmovilizar paneles
        $objPHPExcel->getActiveSheet(0)->freezePane('A2');
        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(0,4);
        $objPHPExcel->setActiveSheetIndex(0);
        header("Pragma: no-cache");
        header('Content-type: application/vnd.ms-excel');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Reporte_categoria.xlsx"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }

    function orderMultiDimensionalArray ($toOrderArray, $field, $inverse = false) {
        $position = array();
        $newRow = array();
        foreach ($toOrderArray as $key => $row) {
            $position[$key]  = $row[$field];
            $newRow[$key] = $row;
        }
        if ($inverse) {
            arsort($position);
        }
        else {
            asort($position);
        }
        $returnArray = array();
        foreach ($position as $key => $pos) {
            $returnArray[] = $newRow[$key];
        }
        return $returnArray;
    }



    private function setDateRequest(&$request)
    {

        //Si no hay fecha establecida dentro de la url se establece desde el 1 al 30/31 del mes actual
        if (!$request->fecha) {
            $month = date('m');
            $year = date('Y');
            $day = date("d", mktime(0,0,0, $month+1, 0, $year));
            $fin= date('Y-m-d', mktime(0,0,0, $month, $day, $year));
            $request->hasta=date('d-m-Y', mktime(0,0,0, $month, $day, $year));
            $month = date('m');
            $year = date('Y');
            $inicio=  date('Y-m-d', mktime(0,0,0, $month, 1, $year));
            $request->fecha=date('d-m-Y', mktime(0,0,0, $month, 1, $year));
        }
        else{
            $inicio= date('Y-m-d', strtotime($request->fecha));
            $fin= date('Y-m-d', strtotime($request->hasta));
        }

        return array(
            'inicio'    => $inicio,
            'fin'       => $fin
        );
    }


}
